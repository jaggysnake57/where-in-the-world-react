{"version":3,"sources":["Components/CountryCard.js","Components/Header.js","api/index.js","features/countries/countrySlice.js","Components/RegionSelector.js","Components/SearchBar.js","pages/CountryPage.js","Components/Modal.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["CountryCard","countryDetails","name","capital","region","population","flag","className","to","style","backgroundImage","toLocaleString","Header","lightMode","setLightMode","type","onClick","icon","faMoonSolid","faMoon","baseURL","allCountriesFields","singleCountryFields","getOneCountry","country","axios","get","searchCountries","search","countrySlice","createSlice","initialState","allCountries","oneCountry","searchedCountries","alphaCodeIndex","error","reducers","setAllCountries","state","action","payload","map","alpha3Code","setOneCountry","setSearchedCountries","clearSearchedCountries","setError","clearError","actions","selectCountries","RegionSelector","setRegion","useState","open","setOpen","handleRegion","value","window","addEventListener","e","select","document","querySelector","contains","target","class","dataset","data-value","SearchBar","setSearch","dispatch","useSelector","useDispatch","handleSubmit","preventDefault","a","api","data","response","status","message","console","log","searchForCountries","onSubmit","htmlFor","faSearch","onChange","placeholder","CountryPage","useParams","useEffect","convertToString","arr","item","join","faArrowLeft","src","alt","native","subregion","topLevelDomain","currencies","languages","borders","code","Modal","forwardRef","ref","closeModal","App","body","classList","add","remove","populateCountries","countriesArray","countryCards","push","exact","path","length","component","configureStore","reducer","countryReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yXA6BeA,G,MAzBK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACdC,EAA4CD,EAA5CC,KAAMC,EAAsCF,EAAtCE,QAASC,EAA6BH,EAA7BG,OAAQC,EAAqBJ,EAArBI,WAAYC,EAASL,EAATK,KAC3C,OACC,qBAAKC,UAAU,cAAf,SACC,eAAC,IAAD,CAAMC,GAAE,WAAMN,GAAd,UACC,qBACCK,UAAU,OACVE,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAT,QACzB,sBAAKC,UAAU,UAAf,UACC,6BAAKL,IACL,8CACa,+BAAOG,EAAWM,sBAE/B,0CACS,+BAAOP,OAEhB,2CACU,+BAAOD,iB,wBCWPS,G,MA1BA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5B,OACC,wBAAQP,UAAU,SAAlB,SACC,sBAAKA,UAAU,YAAf,UACC,qDACA,wBACCA,UAAU,aACVQ,KAAK,SACLC,QAAS,kBAAMF,GAAcD,IAH9B,SAIEA,EACA,qCACC,cAAC,IAAD,CAAiBI,KAAMC,MAAgB,IACvC,gDAGD,qCACC,cAAC,IAAD,CAAiBD,KAAME,MAAW,IAClC,0D,0FCrBDC,EAAU,oCACVC,EACL,0DACKC,EAAmB,UAAMD,EAAN,qEAKZE,EAAgB,SAACC,GAAD,OAC5BC,IAAMC,IAAN,UAAaN,EAAb,gBAA4BI,GAA5B,OAAsCF,KAE1BK,EAAkB,SAACC,GAAD,OAC9BH,IAAMC,IAAN,UAAaN,EAAb,gBAA4BQ,GAA5B,OAAqCP,KCVzBQ,EAAeC,YAAY,CACvC5B,KAAM,UACN6B,aAAc,CACbC,aAAc,GACdC,WAAY,GACZC,kBAAmB,GACnBC,eAAgB,GAChBC,MAAO,IAERC,SAAU,CACTC,gBAAiB,SAACC,EAAOC,GACxBD,EAAMP,aAAeQ,EAAOC,QAE5BF,EAAMP,aAAaU,KAAI,SAAClB,GACvBe,EAAMJ,eAAN,2BACII,EAAMJ,gBADV,kBAEEX,EAAQmB,WAAanB,EAAQtB,WAKjC0C,cAAe,SAACL,EAAOC,GACtBD,EAAMN,WAAaO,EAAOC,SAE3BI,qBAAsB,SAACN,EAAOC,GAC7BD,EAAML,kBAAoBM,EAAOC,SAElCK,uBAAwB,SAACP,GACxBA,EAAML,kBAAoB,IAE3Ba,SAAU,SAACR,EAAOC,GACjBD,EAAMH,MAAQI,EAAOC,SAEtBO,WAAY,SAACT,GACZA,EAAMH,MAAQ,O,EAYbP,EAAaoB,QANhBX,E,EAAAA,gBACAM,E,EAAAA,cACAC,E,EAAAA,qBACAC,E,EAAAA,uBACAC,E,EAAAA,SACAC,E,EAAAA,WAuCYE,EAAkB,SAACX,GAAD,OAAWA,EAAMf,SAEjCK,IAAf,QCrBesB,G,MAlEQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWhD,EAAa,EAAbA,OAAa,EACzBiD,oBAAS,GADgB,mBAC1CC,EAD0C,KACpCC,EADoC,OAEjBF,mBAAS,IAFQ,mBAI3CG,GAJ2C,UAI5B,SAACC,GACrBL,EAAUK,KASX,OAPAC,OAAOC,iBAAiB,SAAS,SAAUC,GAC1C,IAAMC,EAASC,SAASC,cAAc,mBAClC,OAACF,QAAD,IAACA,OAAD,EAACA,EAAQG,SAASJ,EAAEK,UACvBV,GAAQ,MAKT,qBAAKvC,QAAS,kBAAMuC,GAASD,IAAOY,MAAM,wBAA1C,SACC,sBAAKA,MAAOZ,EAAO,qBAAuB,gBAA1C,UACC,sBAAKY,MAAM,yBAAX,UACC,+BACa,QAAX9D,EAAmB,yBAA2BA,IAEhD,qBAAK8D,MAAM,aAEZ,sBAAKA,MAAM,iBAAX,UACC,sBACClD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,MAHZ,iBAMA,sBACCpD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,SAHZ,oBAMA,sBACCpD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,WAHZ,sBAMA,sBACCpD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,OAHZ,kBAMA,sBACCpD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,SAHZ,oBAMA,sBACCpD,QAAS,SAAC4C,GAAD,OAAOJ,EAAaI,EAAEK,OAAOE,QAAQV,QAC9ClD,UAAU,gBACV6D,aAAW,UAHZ,+BCAUC,EA7CG,SAAC,GAA2B,IAAzBjB,EAAwB,EAAxBA,UAAWhD,EAAa,EAAbA,OAAa,EAChBiD,mBAAS,IADO,mBACrCzB,EADqC,KAC7B0C,EAD6B,KAGtCC,GADwBC,YAAYtB,GAAlChB,kBACSuC,eAEXC,EAAe,SAACd,GACrBA,EAAEe,iBACFJ,EFkDgC,SAAC3C,GAAD,8CAAY,WAAO2C,GAAP,iBAAAK,EAAA,+EAErBC,EAAoBjD,GAFC,gBAEpCkD,EAFoC,EAEpCA,KACRP,EAAS1B,EAAqBiC,IAHc,gDAKX,MAA7B,KAAIC,SAASD,KAAKE,QACrBT,EACCxB,EAAS,CACRkC,QAAQ,gCAAD,OAAkCrD,EAAlC,yBAIVsD,QAAQC,IAAI,KAAIJ,UAZ4B,yDAAZ,sDElDvBK,CAAmBxD,KAO7B,OACC,qBAAKrB,UAAU,YAAf,SACC,sBAAKA,UAAU,YAAf,UACC,uBAAM8E,SAAU,SAACzB,GAAD,OAAOc,EAAad,IAApC,UACC,uBAAO0B,QAAQ,GAAf,SACC,cAAC,IAAD,CAAiBrE,KAAMsE,QAExB,mCACCxE,KAAK,OACLyE,SAAU,aACVjF,UAAU,cACVkF,YAAY,4BACZhC,MAAO7B,GALR,YAMW,SAACgC,GAAD,OAAOU,EAAUV,EAAEK,OAAOR,WAGrC,wBAAQlD,UAAU,gBAAlB,oBACA,wBACCQ,KAAK,SACLR,UAAU,gBACVS,QAAS,kBAxBbuD,EAASzB,UACTwB,EAAU,KAoBP,sBAQD,cAAC,EAAD,CAAgBlE,OAAQA,EAAQgD,UAAWA,UC+DhCsC,G,YAtGK,WAAO,IAAD,sBACjBlE,EAAYmE,cAAZnE,QACF+C,EAAWE,cAFQ,EAGcD,YAAYtB,GAA3CjB,EAHiB,EAGjBA,WAAYE,EAHK,EAGLA,eAEpByD,qBAAU,WACTrB,EH0C2B,SAAC/C,GAAD,8CAAa,WAAO+C,GAAP,iBAAAK,EAAA,+EAEjBC,EAAkBrD,GAFD,gBAEhCsD,EAFgC,EAEhCA,KACRP,EAAS3B,EAAckC,IAHiB,gDAKxCI,QAAQC,IAAR,MALwC,yDAAb,sDG1ClB5D,CAAcC,MACrB,CAAC+C,EAAU/C,IAEd,IAAMqE,EAAkB,SAACC,GACxB,GAAmB,qBAARA,EAIV,OAHgBA,EAAIpD,KAAI,SAACqD,GACxB,OAAOA,EAAK7F,QAEI8F,KAAK,OAIxB,OACC,qBAAKzF,UAAU,cAAf,SACC,sBAAKA,UAAU,YAAf,UACC,cAAC,IAAD,CAAMC,GAAG,IAAT,SACC,yBAAQD,UAAU,cAAlB,UACC,cAAC,IAAD,CAAiBU,KAAMgF,MADxB,aAID,sBAAK1F,UAAU,cAAf,UAOC,qBAAK2F,IAAG,UAAEjE,EAAW,UAAb,aAAE,EAAe3B,KAAM6F,IAAI,KACnC,sBAAK5F,UAAU,iBAAf,UACC,uCAAK0B,EAAW,UAAhB,aAAK,EAAe/B,OACpB,sBAAKK,UAAU,cAAf,UACC,sBAAKA,UAAU,MAAf,UACC,8CACc,IACb,yCAAO0B,EAAW,UAAlB,aAAO,EAAemE,YAEvB,6CACa,IACZ,yCACEnE,EAAW,UADb,aACE,EAAe5B,WAAWM,sBAG7B,0CACS,yCAAOsB,EAAW,UAAlB,aAAO,EAAe7B,YAE/B,6CACa,IACZ,yCAAO6B,EAAW,UAAlB,aAAO,EAAeoE,eAEvB,0CACU,IACT,yCAAOpE,EAAW,UAAlB,aAAO,EAAe9B,gBAGxB,sBAAKI,UAAU,MAAf,UACC,mDACmB,IAClB,yCAAO0B,EAAW,UAAlB,aAAO,EAAeqE,oBAEvB,6CACa,IACZ,+BACET,EAAe,UACf5D,EAAW,UADI,aACf,EAAesE,iBAIlB,4CACY,IACX,+BACEV,EAAe,UACf5D,EAAW,UADI,aACf,EAAeuE,sBAMpB,sBAAKjG,UAAU,yBAAf,UACC,oDACA,qBAAKA,UAAU,eAAf,mBACE0B,EAAW,UADb,aACE,EAAewE,QAAQ/D,KAAI,SAACgE,GAAD,OAC3B,cAAC,IAAD,CACClG,GAAE,WAAM2B,EAAeuE,IACvBnG,UAAU,MAFX,SAGE4B,EAAeuE,0BCtFXC,G,MAbDC,sBAAW,WAA0BC,GAAS,IAAhC5B,EAA+B,EAA/BA,QAAS6B,EAAsB,EAAtBA,WACpC,OACC,qBAAK5C,MAAM,QAAQ2C,IAAKA,EAAxB,SACC,sBAAKtG,UAAU,WAAf,UACC,6BAAK0E,IACL,wBAAQjE,QAAS,kBAAM8F,KAAcvG,UAAU,MAA/C,4BCwEWwG,MAhEf,WAAgB,IAAD,EACoB1D,oBAAS,GAD7B,mBACPxC,EADO,KACIC,EADJ,OAEcuC,mBAAS,OAFvB,mBAEPjD,EAFO,KAECgD,EAFD,OAIqCoB,YAClDtB,GADOlB,EAJM,EAINA,aAAcE,EAJR,EAIQA,kBAAmBE,EAJ3B,EAI2BA,MAGnCmC,EAAWE,cAKjBmB,qBAAU,WACTrB,ELuB6B,uCAAM,WAAOA,GAAP,iBAAAK,EAAA,+ED5CpCnD,IAAMC,IAAN,UAAaN,EAAb,cAA0BC,IC4CU,gBAE3ByD,EAF2B,EAE3BA,KACRP,EAASjC,EAAgBwC,IAHU,gDAKnCI,QAAQC,IAAR,MALmC,yDAAN,yDKtB3B,CAACZ,IAEJqB,qBAAU,WACT,IAAMoB,EAAOlD,SAASkD,KAAKC,UAC3BpG,EAAYmG,EAAKE,IAAI,aAAeF,EAAKG,OAAO,eAC9C,CAACtG,IAEJ,IAAMuG,EAAoB,SAACC,GAC1B,IAAIC,EAAe,GAWnB,OAVc,OAAdD,QAAc,IAAdA,KAAgB3E,KAAI,SAAClB,GAAD,MACR,QAAXpB,GAAoBoB,EAAQpB,SAAWA,EACpCkH,EAAaC,KACb,cAAC,EAAD,CAECtH,eAAgBuB,GADXA,EAAQmB,aAId,MAEG2E,GAGR,OACC,qBAAK/G,UAAU,MAAf,SACC,eAAC,IAAD,WACC,cAAC,EAAD,CAAQM,UAAWA,EAAWC,aAAcA,IAE3CsB,GACA,cAAC,EAAD,CAAO6C,QAAS7C,EAAM6C,QAAS6B,WAlChB,WAClBvC,EAASvB,QAmCP,eAAC,IAAD,WACC,eAAC,IAAD,CAAOwE,OAAK,EAACC,KAAK,IAAlB,UACC,cAAC,EAAD,CAAWrE,UAAWA,EAAWhD,OAAQA,IACzC,yBAASG,UAAU,wBAAnB,SACE2B,EAAkBwF,OAChBN,EAAkBlF,GAClBkF,EAAkBpF,QAGvB,cAAC,IAAD,CAAOwF,OAAK,EAACC,KAAK,YAAYE,UAAWjC,aClE/BkC,cAAe,CAC7BC,QAAS,CACRrG,QAASsG,KCOSC,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACC,cAAC,EAAD,QAGFxE,SAASyE,eAAe,SDqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a0579aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../css/Components/CountryCard.css';\r\n\r\nconst CountryCard = ({ countryDetails }) => {\r\n\tconst { name, capital, region, population, flag } = countryDetails;\r\n\treturn (\r\n\t\t<div className=\"countryCard\">\r\n\t\t\t<Link to={`/${name}`}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"flag\"\r\n\t\t\t\t\tstyle={{ backgroundImage: `url(${flag})` }}></div>\r\n\t\t\t\t<div className=\"details\">\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tPopulation: <span>{population.toLocaleString()}</span>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tRegion: <span>{region}</span>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\tCapital: <span>{capital}</span>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t</div>\r\n\t\t\t</Link>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CountryCard;\r\n","import React from 'react';\r\nimport { faMoon as faMoonSolid } from '@fortawesome/free-solid-svg-icons';\r\nimport { faMoon } from '@fortawesome/free-regular-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../css/Components/Header.css';\r\n\r\nconst Header = ({ lightMode, setLightMode }) => {\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h1>Where in the World?</h1>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"modeSwitch\"\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => setLightMode(!lightMode)}>\r\n\t\t\t\t\t{lightMode ? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faMoonSolid} />{' '}\r\n\t\t\t\t\t\t\t<span>Dark Mode</span>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faMoon} />{' '}\r\n\t\t\t\t\t\t\t<span>Light Mode</span>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst baseURL = 'https://restcountries.eu/rest/v2/';\r\nconst allCountriesFields =\r\n\t'?fields=name;capital;region;population;flag;alpha3Code;';\r\nconst singleCountryFields = `${allCountriesFields}nativeName;subregion;borders;currencies;topLevelDomain;languages;`;\r\n\r\nexport const getAllCountries = () =>\r\n\taxios.get(`${baseURL}all${allCountriesFields}`);\r\n\r\nexport const getOneCountry = (country) =>\r\n\taxios.get(`${baseURL}name/${country}${singleCountryFields}`);\r\n\r\nexport const searchCountries = (search) =>\r\n\taxios.get(`${baseURL}name/${search}${allCountriesFields}`);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { act } from 'react-dom/test-utils';\r\nimport * as api from '../../api';\r\n\r\nexport const countrySlice = createSlice({\r\n\tname: 'country',\r\n\tinitialState: {\r\n\t\tallCountries: [],\r\n\t\toneCountry: [],\r\n\t\tsearchedCountries: [],\r\n\t\talphaCodeIndex: {},\r\n\t\terror: '',\r\n\t},\r\n\treducers: {\r\n\t\tsetAllCountries: (state, action) => {\r\n\t\t\tstate.allCountries = action.payload;\r\n\t\t\t//map through all countries\r\n\t\t\tstate.allCountries.map((country) => {\r\n\t\t\t\tstate.alphaCodeIndex = {\r\n\t\t\t\t\t...state.alphaCodeIndex,\r\n\t\t\t\t\t[country.alpha3Code]: country.name,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t//add alpha code as key and country name as value\r\n\t\t},\r\n\t\tsetOneCountry: (state, action) => {\r\n\t\t\tstate.oneCountry = action.payload;\r\n\t\t},\r\n\t\tsetSearchedCountries: (state, action) => {\r\n\t\t\tstate.searchedCountries = action.payload;\r\n\t\t},\r\n\t\tclearSearchedCountries: (state) => {\r\n\t\t\tstate.searchedCountries = [];\r\n\t\t},\r\n\t\tsetError: (state, action) => {\r\n\t\t\tstate.error = action.payload;\r\n\t\t},\r\n\t\tclearError: (state) => {\r\n\t\t\tstate.error = '';\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const {\r\n\tsetAllCountries,\r\n\tsetOneCountry,\r\n\tsetSearchedCountries,\r\n\tclearSearchedCountries,\r\n\tsetError,\r\n\tclearError,\r\n} = countrySlice.actions;\r\n\r\nexport const getAllCountries = () => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.getAllCountries();\r\n\t\tdispatch(setAllCountries(data));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n};\r\nexport const getOneCountry = (country) => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.getOneCountry(country);\r\n\t\tdispatch(setOneCountry(data));\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n};\r\n\r\nexport const searchForCountries = (search) => async (dispatch) => {\r\n\ttry {\r\n\t\tconst { data } = await api.searchCountries(search);\r\n\t\tdispatch(setSearchedCountries(data));\r\n\t} catch (err) {\r\n\t\tif (err.response.data.status === 404) {\r\n\t\t\tdispatch(\r\n\t\t\t\tsetError({\r\n\t\t\t\t\tmessage: `No Countries found, matching ${search}, please try again`,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\tconsole.log(err.response);\r\n\t}\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCountries = (state) => state.country;\r\n\r\nexport default countrySlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport '../css/Components/RegionSelector.css';\r\n\r\nconst RegionSelector = ({ setRegion, region }) => {\r\n\tconst [open, setOpen] = useState(false);\r\n\tconst [selected, setSelected] = useState('');\r\n\r\n\tconst handleRegion = (value) => {\r\n\t\tsetRegion(value);\r\n\t};\r\n\twindow.addEventListener('click', function (e) {\r\n\t\tconst select = document.querySelector('.custom-select');\r\n\t\tif (!select?.contains(e.target)) {\r\n\t\t\tsetOpen(false);\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div onClick={() => setOpen(!open)} class=\"custom-select-wrapper\">\r\n\t\t\t<div class={open ? 'custom-select open' : 'custom-select'}>\r\n\t\t\t\t<div class=\"custom-select__trigger\">\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{region === 'all' ? 'Please select a region' : region}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<div class=\"arrow\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"custom-options\">\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"all\">\r\n\t\t\t\t\t\tAll\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"Africa\">\r\n\t\t\t\t\t\tAfrica\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"Americas\">\r\n\t\t\t\t\t\tAmericas\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"Asia\">\r\n\t\t\t\t\t\tAsia\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"Europe\">\r\n\t\t\t\t\t\tEurope\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={(e) => handleRegion(e.target.dataset.value)}\r\n\t\t\t\t\t\tclassName=\"custom-option\"\r\n\t\t\t\t\t\tdata-value=\"Oceania\">\r\n\t\t\t\t\t\tOceania\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RegionSelector;\r\n","import React, { useState } from 'react';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../css/Components/SearchBar.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n\tsearchForCountries,\r\n\tselectCountries,\r\n\tclearSearchedCountries,\r\n} from '../features/countries/countrySlice';\r\nimport RegionSelector from './RegionSelector';\r\n\r\nconst SearchBar = ({ setRegion, region }) => {\r\n\tconst [search, setSearch] = useState('');\r\n\tconst { searchedCountries } = useSelector(selectCountries);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tdispatch(searchForCountries(search));\r\n\t};\r\n\tconst handleClear = () => {\r\n\t\tdispatch(clearSearchedCountries());\r\n\t\tsetSearch([]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"searchBar\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t\t\t<label htmlFor=\"\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faSearch} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={() => {}}\r\n\t\t\t\t\t\tclassName=\"searchInput\"\r\n\t\t\t\t\t\tplaceholder=\"Search for a country.....\"\r\n\t\t\t\t\t\tvalue={search}\r\n\t\t\t\t\t\tonChange={(e) => setSearch(e.target.value)}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<button className=\"btn searchBtn\">Search</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btnDanger\"\r\n\t\t\t\t\t\tonClick={() => handleClear()}>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<RegionSelector region={region} setRegion={setRegion} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBar;\r\n","import { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport {\r\n\tgetOneCountry,\r\n\tselectCountries,\r\n} from '../features/countries/countrySlice';\r\n\r\nimport '../css/pages/CountryPage.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst CountryPage = () => {\r\n\tconst { country } = useParams();\r\n\tconst dispatch = useDispatch();\r\n\tconst { oneCountry, alphaCodeIndex } = useSelector(selectCountries);\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getOneCountry(country));\r\n\t}, [dispatch, country]);\r\n\r\n\tconst convertToString = (arr) => {\r\n\t\tif (typeof arr !== 'undefined') {\r\n\t\t\tlet toConvert = arr.map((item) => {\r\n\t\t\t\treturn item.name;\r\n\t\t\t});\r\n\t\t\treturn toConvert.join(', ');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"countryPage\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Link to=\"/\">\r\n\t\t\t\t\t<button className=\"btn btnBack\">\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faArrowLeft} /> Back\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<div className=\"mainContent\">\r\n\t\t\t\t\t{/* <div\r\n\t\t\t\t\t\tclassName=\"flag\"\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundImage: `url(${oneCountry[0]?.flag})`,\r\n\t\t\t\t\t\t}}></div> */}\r\n\r\n\t\t\t\t\t<img src={oneCountry[0]?.flag} alt=\"\" />\r\n\t\t\t\t\t<div className=\"countryDetails\">\r\n\t\t\t\t\t\t<h1>{oneCountry[0]?.name}</h1>\r\n\t\t\t\t\t\t<div className=\"countryBody\">\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tNative Name:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>{oneCountry[0]?.native}</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tPopulation:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{oneCountry[0]?.population.toLocaleString()}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tRegion: <span>{oneCountry[0]?.region}</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tSub Region:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>{oneCountry[0]?.subregion}</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tCapital:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>{oneCountry[0]?.capital}</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tTop Level Domain:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>{oneCountry[0]?.topLevelDomain}</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tCurrencies:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{convertToString(\r\n\t\t\t\t\t\t\t\t\t\t\toneCountry[0]?.currencies\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\t\tLanguages:{' '}\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{convertToString(\r\n\t\t\t\t\t\t\t\t\t\t\toneCountry[0]?.languages\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"borderCountriesButtons\">\r\n\t\t\t\t\t\t\t<h4>Border Countries: </h4>\r\n\t\t\t\t\t\t\t<div className=\"buttonHolder\">\r\n\t\t\t\t\t\t\t\t{oneCountry[0]?.borders.map((code) => (\r\n\t\t\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\t\t\tto={`/${alphaCodeIndex[code]}`}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn\">\r\n\t\t\t\t\t\t\t\t\t\t{alphaCodeIndex[code]}\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CountryPage;\r\n","import React, { forwardRef } from 'react';\r\nimport '../css/Components/Modal.css';\r\n\r\nconst Modal = forwardRef(({ message, closeModal }, ref) => {\r\n\treturn (\r\n\t\t<div class=\"modal\" ref={ref}>\r\n\t\t\t<div className=\"modalBox\">\r\n\t\t\t\t<h4>{message}</h4>\r\n\t\t\t\t<button onClick={() => closeModal()} className=\"btn\">\r\n\t\t\t\t\tclose\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default Modal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport CountryCard from './Components/CountryCard';\r\nimport Header from './Components/Header';\r\nimport SearchBar from './Components/SearchBar';\r\nimport './css/App.css';\r\nimport CountryPage from './pages/CountryPage';\r\nimport {\r\n\tclearError,\r\n\tgetAllCountries,\r\n\tselectCountries,\r\n} from './features/countries/countrySlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from './Components/Modal';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction App() {\r\n\tconst [lightMode, setLightMode] = useState(false);\r\n\tconst [region, setRegion] = useState('all');\r\n\r\n\tconst { allCountries, searchedCountries, error } = useSelector(\r\n\t\tselectCountries\r\n\t);\r\n\tconst dispatch = useDispatch();\r\n\tconst closeModal = () => {\r\n\t\tdispatch(clearError());\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getAllCountries());\r\n\t}, [dispatch]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst body = document.body.classList;\r\n\t\tlightMode ? body.add('lightMode') : body.remove('lightMode');\r\n\t}, [lightMode]);\r\n\r\n\tconst populateCountries = (countriesArray) => {\r\n\t\tlet countryCards = [];\r\n\t\tcountriesArray?.map((country) =>\r\n\t\t\tregion === 'all' || country.region === region\r\n\t\t\t\t? countryCards.push(\r\n\t\t\t\t\t\t<CountryCard\r\n\t\t\t\t\t\t\tkey={country.alpha3Code}\r\n\t\t\t\t\t\t\tcountryDetails={country}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t  )\r\n\t\t\t\t: ''\r\n\t\t);\r\n\t\treturn countryCards;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Router>\r\n\t\t\t\t<Header lightMode={lightMode} setLightMode={setLightMode} />\r\n\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<Modal message={error.message} closeModal={closeModal} />\r\n\t\t\t\t)}\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<SearchBar setRegion={setRegion} region={region} />\r\n\t\t\t\t\t\t<section className=\"container countryGrid\">\r\n\t\t\t\t\t\t\t{searchedCountries.length\r\n\t\t\t\t\t\t\t\t? populateCountries(searchedCountries)\r\n\t\t\t\t\t\t\t\t: populateCountries(allCountries)}\r\n\t\t\t\t\t\t</section>\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/:country\" component={CountryPage} />\r\n\t\t\t\t</Switch>\r\n\r\n\t\t\t\t{/* header */}\r\n\t\t\t\t{/* search bar  */}\r\n\t\t\t\t{/* array of countries */}\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport countryReducer from '../features/countries/countrySlice';\r\n\r\nexport default configureStore({\r\n\treducer: {\r\n\t\tcountry: countryReducer,\r\n\t},\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}